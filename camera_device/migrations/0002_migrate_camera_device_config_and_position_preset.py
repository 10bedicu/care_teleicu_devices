# Generated by Django 5.1.4 on 2025-03-21 05:08
from django.core.paginator import Paginator
from django.db import migrations

MIGRATION_ID = 1584456952001


def migrate_camera_device_config(apps, schema_editor):
    from care.emr.models import Device
    from care.facility.utils import disable_auto_time

    enable_auto_time = disable_auto_time(Device)

    Device.objects.filter(metadata__class="ONVIF").update(care_type="camera")

    queryset = Device.objects.filter(care_type="camera").order_by("id")
    paginator = Paginator(queryset, 1000)
    for page in paginator.page_range:
        bulk = []
        for device in paginator.page(page):
            metadata = device.metadata
            # TODO: switch to read from meta once @sainak is done with the changes
            metadata["type"] = metadata.pop("class", "ONVIF")
            connection_meta = metadata.pop("connection_meta", {})
            metadata["endpoint_address"] = connection_meta.get("local_ip_address")
            try:
                metadata["username"], metadata["password"], metadata["stream_id"] = (
                    connection_meta.get("camera_access_key", "").split(":")
                )
            except ValueError:
                pass
            bulk.append(device)
        Device.objects.bulk_update(bulk, ["metadata"])

    enable_auto_time()


def reverse_migrate_camera_device_config(apps, schema_editor):
    pass


def migrate_position_preset(apps, schema_editor):
    from camera_device.models import PositionPreset
    from care.facility.utils import disable_auto_time

    enable_auto_time = disable_auto_time(PositionPreset)

    CameraPreset = apps.get_model("facility", "CameraPreset")

    query = (
        CameraPreset.objects.all()
        .select_related("asset_bed", "asset_bed__asset", "asset_bed__bed")
        .order_by("id")
    )

    paginator = Paginator(query, 1000)
    for page in paginator.page_range:
        bulk = []
        for preset in paginator.page(page):
            bulk.append(
                PositionPreset(
                    external_id=preset.external_id,
                    name=preset.name,
                    camera_id=preset.asset_bed.asset.migrated_emr_device_id,
                    location_id=preset.asset_bed.bed.migrated_emr_bed_id,
                    ptz=preset.position,
                    created_date=preset.created_date,
                    modified_date=preset.modified_date,
                    created_by_id=preset.created_by_id,
                    updated_by_id=preset.updated_by_id,
                    meta={
                        "migration_id": MIGRATION_ID,
                    },
                )
            )
        PositionPreset.objects.bulk_create(bulk)

    enable_auto_time()


def reverse_migrate_position_preset(apps, schema_editor):
    PositionPreset = apps.get_model("camera_device", "PositionPreset")
    PositionPreset.objects.filter(meta__migration_id=MIGRATION_ID).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("camera_device", "0001_initial"),
        ("facility", "0490_migrate_assets"),
    ]

    operations = [
        migrations.RunPython(
            migrate_camera_device_config,
            reverse_migrate_camera_device_config,
        ),
        migrations.RunPython(
            migrate_position_preset,
            reverse_migrate_position_preset,
        ),
    ]
